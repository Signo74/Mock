<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600" width="100%" height="100%">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			[Bindable]
			private var arr:Array = [2,3,1,5,6,7,4,0,0,1,2,5,9,12,15,7,7,8,9];
			[Bindable]
			private var nestedArr:Array = [2,[3,4],5,[6,7,4,0,0],1,2,[5,[9,12]],15,7,7,8,9];
			[Bindable]
			private var nestedResultArray:Array = new Array;
			[Bindable]
			private var streakCount:int = 0;
			[Bindable]
			private var streak:Array = new Array;
			
			private var localStreakCount:int = 0;
			private var tempArr:Array = new Array;
			
			private function arrayDemo():void {
				displayText.text = "";
				for (var i:int = startNumber.value ; i < endNumber.value ; i++) {
					if ((i % parseInt(value1.text)) == 0) {
						if ((i % parseInt(value2.text)) == 0) {
							displayText.text += replacement3.text;
						} else {
							displayText.text += replacement1.text;
						}
					} else if ((i % parseInt(value2.text)) == 0) {
						displayText.text += replacement2.text;
					} else {
						displayText.text += i;
					}
					displayText.text += "\n"
				}
			}
			
			
			private function sudokuDemo():void {				
			}
			
			private function nestedArraysDemo(tempArr:Array):void {
				for (var i:int = 0 ; i < tempArr.length ; i++){
					displayText.text += getQualifiedClassName(tempArr[i]) + "\n"
					if (getQualifiedClassName(tempArr[i]) == "Array") {
						nestedArraysDemo(tempArr[i]);
					} else {
						nestedResultArray.push(tempArr[i]);
						nestedResult.text = nestedResultArray.toString();	
					}
				}
			}
			
			private function ascendingNumeralsDemo():void {
				for (var i:int = 1 ; i < arr.length ; i++) {
					if (arr[i] > arr[i-1]) {
						localStreakCount++
							tempArr.push(arr[i-1]);
					} else {
						if (localStreakCount > streakCount) {
							streakCount = localStreakCount;
							streak = tempArr;
							streak.push(arr[i-1]);						
							streakLabel.text = streak.toString();
						} else {
							streak.length = 0;
						}
						localStreakCount = 0;
						tempArr.length = 0;
					}
				}
			}
			
		]]>
	</fx:Script>
	<s:HGroup width="100%" height="100%">
		<s:VGroup width="50%" height="100%">
			<s:BorderContainer  id="exampleContent" width="100%" height="70%" x="0" y="0">	
				
				<s:VGroup id="arrays" visible="false">
					<s:HGroup id="arrayLimits">
						<s:NumericStepper id="startNumber" value="1"/>
						<s:NumericStepper id="endNumber" value="100" maximum="100"/>
					</s:HGroup>
					
					<s:HGroup id="valuesToReplace">
						<s:TextInput id="value1" text="3" />
						<s:TextInput id="value2" text="5" />
						<s:TextInput id="value3" text="{value1.text} + and + {value2.text}" />
					</s:HGroup>
					
					<s:HGroup id="digitReplacements">
						<s:TextInput id="replacement1" text="string 1" />
						<s:TextInput id="replacement2" text="string 2" />
						<s:TextInput id="replacement3" text="string 3" />
					</s:HGroup>
					<s:Button id="runArrayDemo" label="Run!" click="arrayDemo()"/>
				</s:VGroup>
				
				<s:VGroup id="sudoku">
					<!--<s:Button id="runSudokuDemo" label="Run!" click="sudokuDemo()"/>--> 
				</s:VGroup>
				
				<s:VGroup id="ascendingNumerals" visible="false">
					<s:Label id="arrayDisplay" text="{arr.toString()}"/>
					<s:HGroup>
						<s:Label id="streakCountLabel" text="{streakCount}"/>
						<s:Label id="streakLabel"/>
					</s:HGroup>				
					<s:Button id="runAscendgingNumerals" label="Run!" click="ascendingNumeralsDemo()"/>				
				</s:VGroup>
				
				<s:VGroup id="nestedArrays" visible="false">
					<s:Label id="nestedArrayDisplay" text="{nestedArr}"/>
					<s:Label id="nestedResult" text="{nestedResultArray}"/>
					<s:Button id="runnestedArrays" label="Run!" click="nestedArraysDemo(nestedArr)"/>				
				</s:VGroup>
			</s:BorderContainer>	
			
			<s:HGroup id="demoSwitch" width="100%" height="30">
				<s:Button id="demo1Button" label="Arrays"/>
				<s:Button id="demo2Button" label="Sudoku"/>
				<s:Button id="demo3Button" label="Ascending Numerals"/>
			</s:HGroup>	
			
		</s:VGroup>
		
		<s:TextArea id="displayText" width="50%" height="100%" left="0">
			<s:text>Output text will go here</s:text>
		</s:TextArea>
	</s:HGroup>
	
</s:Application>